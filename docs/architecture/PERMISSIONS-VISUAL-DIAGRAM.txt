╔═══════════════════════════════════════════════════════════════════════════════╗
║           PERMISSIONS ARCHITECTURE - VISUAL REFERENCE GUIDE                   ║
╚═══════════════════════════════════════════════════════════════════════════════╝

┌─────────────────────────────────────────────────────────────────────────────┐
│                        OLD ARCHITECTURE (BROKEN)                            │
└─────────────────────────────────────────────────────────────────────────────┘

    ┌──────────────────┐
    │      users       │
    ├──────────────────┤
    │ id               │
    │ email            │
    │ name             │
    │ is_global_admin  │ ← Added in migration 023 to fix RLS recursion
    └──────────────────┘
            │
            │ (RLS RECURSION!)
            ↓
    ┌──────────────────────┐
    │ user_organizations   │
    ├──────────────────────┤
    │ user_id              │
    │ organization_id      │
    │ role (VARCHAR)       │ ← String: 'owner', 'admin', 'member', 'viewer'
    │ is_global_admin      │ ← DEPRECATED: Caused RLS infinite loop
    │ permissions (JSONB)  │ ← DEPRECATED: Scattered permission flags
    │ is_active            │
    └──────────────────────┘

    PROBLEMS:
    ❌ is_global_admin exists in TWO places
    ❌ RLS policy checking user_organizations causes infinite recursion
    ❌ Role strings can have typos ('admn' vs 'admin')
    ❌ Permissions scattered across 71 files
    ❌ No clear upgrade path


┌─────────────────────────────────────────────────────────────────────────────┐
│                        NEW ARCHITECTURE (CLEAN)                             │
└─────────────────────────────────────────────────────────────────────────────┘

┌──────────────────────┐
│    user_types        │ ← GLOBAL/PLATFORM LEVEL
├──────────────────────┤
│ id (UUID)            │
│ type_code (VARCHAR)  │ ← 'global_admin', 'regular_user'
│ type_name            │ ← 'Global Administrator', 'Regular User'
│ global_permissions   │ ← JSONB: Platform-wide permissions
│   {                  │
│     can_access_all_  │
│       organizations  │ ← Global admins bypass org checks
│     can_create_org   │
│     can_delete_org   │
│     ...              │
│   }                  │
└──────────────────────┘
         ↓
         │ (FK)
         ↓
┌──────────────────────┐
│       users          │
├──────────────────────┤
│ id                   │
│ email                │
│ name                 │
│ user_type_id ────────┼──→ REFERENCES user_types(id)
│ is_global_admin      │ ← DEPRECATED (kept for backwards compat)
└──────────────────────┘
         │
         │ (FK)
         ↓
┌──────────────────────────┐
│ user_organizations       │
├──────────────────────────┤
│ user_id                  │
│ organization_id          │
│ org_role_id ─────────────┼──→ REFERENCES organization_roles(id)
│ role (VARCHAR)           │ ← DEPRECATED (kept for backwards compat)
│ is_global_admin          │ ← DEPRECATED
│ permissions (JSONB)      │ ← DEPRECATED
│ is_active                │
└──────────────────────────┘
         ↓
         │ (FK)
         ↓
┌──────────────────────────┐
│ organization_roles       │ ← ORGANIZATION-SPECIFIC LEVEL
├──────────────────────────┤
│ id (UUID)                │
│ role_code (VARCHAR)      │ ← 'owner', 'admin', 'member', 'viewer'
│ role_name                │ ← 'Owner', 'Administrator', etc.
│ hierarchy_level (INT)    │ ← 4=owner, 3=admin, 2=member, 1=viewer
│ org_permissions (JSONB)  │ ← Organization-level permissions
│   {                      │
│     can_manage_users     │
│     can_edit_sections    │
│     can_approve_stages   │
│     can_upload_docs      │
│     ...                  │
│   }                      │
└──────────────────────────┘

    BENEFITS:
    ✅ Clear separation: Global vs Organization permissions
    ✅ No RLS recursion (global check uses users table directly)
    ✅ Type-safe role IDs (no typos)
    ✅ Centralized permission logic (4 database functions)
    ✅ Backwards compatible (old columns remain)


┌─────────────────────────────────────────────────────────────────────────────┐
│                     PERMISSION CHECK FLOW                                   │
└─────────────────────────────────────────────────────────────────────────────┘

    User Request
         │
         ↓
    ┌────────────────────────────────────────┐
    │  Middleware: attachUserPermissions     │
    │  ├─ Get user_type_id from users table  │
    │  ├─ Get org_role_id from user_orgs     │
    │  └─ Attach to req.userPermissions      │
    └────────────────────────────────────────┘
         │
         ↓
    ┌────────────────────────────────────────┐
    │  Route Guard: requireOrgPermission()   │
    │                                        │
    │  1. Check global permission first?     │
    │     user_has_global_permission(       │
    │       user_id, 'can_access_all_orgs'  │
    │     )                                  │
    │     ↓ YES → Grant access               │
    │     ↓ NO  → Continue                   │
    │                                        │
    │  2. Check org permission               │
    │     user_has_org_permission(          │
    │       user_id, org_id, 'can_edit'     │
    │     )                                  │
    │     ↓ YES → Grant access               │
    │     ↓ NO  → Deny (403)                 │
    └────────────────────────────────────────┘
         │
         ↓
    Route Handler
    (Business Logic)


┌─────────────────────────────────────────────────────────────────────────────┐
│                     DATABASE HELPER FUNCTIONS                               │
└─────────────────────────────────────────────────────────────────────────────┘

    user_has_global_permission(user_id, permission)
    ├─ SELECT global_permissions->>permission
    │  FROM users u
    │  JOIN user_types ut ON u.user_type_id = ut.id
    │  WHERE u.id = user_id
    └─ RETURNS BOOLEAN

    user_has_org_permission(user_id, org_id, permission)
    ├─ IF user_has_global_permission('can_access_all_orgs')
    │    THEN RETURN TRUE (global admins bypass)
    │
    ├─ SELECT org_permissions->>permission
    │  FROM user_organizations uo
    │  JOIN organization_roles r ON uo.org_role_id = r.id
    │  WHERE uo.user_id = user_id
    │    AND uo.organization_id = org_id
    │    AND uo.is_active = true
    └─ RETURNS BOOLEAN

    user_has_min_role_level(user_id, org_id, min_level)
    ├─ IF user_has_global_permission('can_access_all_orgs')
    │    THEN RETURN TRUE
    │
    ├─ SELECT hierarchy_level
    │  FROM user_organizations uo
    │  JOIN organization_roles r ON uo.org_role_id = r.id
    │  WHERE uo.user_id = user_id
    │    AND uo.organization_id = org_id
    └─ RETURN hierarchy_level >= min_level

    get_user_effective_permissions(user_id, org_id)
    ├─ Get global_permissions from user_types
    ├─ Get org_permissions from organization_roles
    └─ RETURN merged JSONB (global || org)


┌─────────────────────────────────────────────────────────────────────────────┐
│                     MIDDLEWARE API COMPARISON                               │
└─────────────────────────────────────────────────────────────────────────────┘

OLD API (roleAuth.js):
    requireAdmin(req, res, next)
    requireOwner(req, res, next)
    requireMember(req, res, next)
    hasRole(req, 'admin')
    canApproveStage(req, stageId)

NEW API (permissions.js):
    ─────────────────────────────────────────────────────────────
    RECOMMENDED (Permission-Based):
    ─────────────────────────────────────────────────────────────
    requireOrgPermission('can_manage_users')
    requireOrgPermission('can_edit_sections')
    requireOrgPermission('can_upload_documents')
    requireGlobalPermission('can_access_all_organizations')

    hasOrgPermission(req, 'can_manage_workflows')
    hasGlobalPermission(req, 'can_create_organizations')

    ─────────────────────────────────────────────────────────────
    BACKWARDS COMPATIBLE (Role-Based):
    ─────────────────────────────────────────────────────────────
    requireRole('admin')  ← Wrapper for hasMinRoleLevel(req, 3)
    requireRole('owner')  ← Wrapper for hasMinRoleLevel(req, 4)
    hasRole(req, 'member')
    isGlobalAdmin(req)


┌─────────────────────────────────────────────────────────────────────────────┐
│                     MIGRATION COMPATIBILITY                                 │
└─────────────────────────────────────────────────────────────────────────────┘

    DURING MIGRATION (Backwards Compatible):
    ┌─────────────────────────────────────────┐
    │  user_organizations                     │
    │  ├─ role (VARCHAR)        ← OLD, still works
    │  ├─ org_role_id (UUID)    ← NEW
    │  ├─ is_global_admin       ← OLD, deprecated
    │  └─ permissions (JSONB)   ← OLD, deprecated
    └─────────────────────────────────────────┘

    POST-MIGRATION v3.0 (Clean):
    ┌─────────────────────────────────────────┐
    │  user_organizations                     │
    │  ├─ org_role_id (UUID)    ← ONLY THIS
    │  └─ is_active (BOOLEAN)
    └─────────────────────────────────────────┘


┌─────────────────────────────────────────────────────────────────────────────┐
│                     EXAMPLE USE CASES                                       │
└─────────────────────────────────────────────────────────────────────────────┘

USE CASE 1: User Management
    ────────────────────────────────────────────────────────────
    OLD:
        router.post('/invite', requireAdmin, ...)

    NEW (Recommended):
        router.post('/invite',
          requireOrgPermission('can_manage_users'),
          ...
        )

    WHY BETTER?
    ✅ Self-documenting (clearly states what permission is needed)
    ✅ More flexible (can change permission without code change)
    ✅ Granular (separate 'can_invite' from 'can_delete_users')

USE CASE 2: Global Admin Access
    ────────────────────────────────────────────────────────────
    OLD (Causes RLS recursion):
        SELECT * FROM documents
        WHERE organization_id = $1
        OR EXISTS (
          SELECT 1 FROM user_organizations
          WHERE user_id = auth.uid()
          AND is_global_admin = true  ← RECURSION!
        )

    NEW (No recursion):
        SELECT * FROM documents
        WHERE organization_id = $1
        OR EXISTS (
          SELECT 1 FROM users u
          JOIN user_types ut ON u.user_type_id = ut.id
          WHERE u.id = auth.uid()
          AND (ut.global_permissions->>'can_access_all_organizations')::boolean
        )

    WHY BETTER?
    ✅ No RLS recursion (checks users table, not user_organizations)
    ✅ Faster (indexed user_type_id lookup)
    ✅ More reliable (no circular dependency)

USE CASE 3: Workflow Approval
    ────────────────────────────────────────────────────────────
    OLD:
        if (await canApproveStage(req, stageId)) {
          // Complex custom logic
        }

    NEW:
        if (await hasOrgPermission(req, 'can_approve_stages')) {
          // Permission already checked
          // Additional stage-specific logic here
        }

    WHY BETTER?
    ✅ Separates permission check from business logic
    ✅ Easier to test (mock single permission check)
    ✅ Clearer code (permission vs workflow logic)


┌─────────────────────────────────────────────────────────────────────────────┐
│                     PERFORMANCE COMPARISON                                  │
└─────────────────────────────────────────────────────────────────────────────┘

OLD ARCHITECTURE:
    Permission Check:
    ├─ Query user_organizations (table scan)
    ├─ Check role VARCHAR against hierarchy
    ├─ Check JSONB permissions field
    └─ Average: 80-120ms

    RLS Policy Check:
    ├─ Query user_organizations AGAIN (recursion!)
    ├─ Check is_global_admin (causes infinite loop workaround)
    └─ Average: 150-200ms (with workarounds)

NEW ARCHITECTURE:
    Permission Check:
    ├─ Indexed lookup on users.user_type_id
    ├─ Indexed lookup on user_organizations.org_role_id
    ├─ Single database function call
    └─ Average: 20-50ms

    RLS Policy Check:
    ├─ Indexed lookup on users.user_type_id
    ├─ Simple JSONB field check
    └─ Average: 10-30ms

IMPROVEMENT: 3-5x faster


┌─────────────────────────────────────────────────────────────────────────────┐
│                     ROLLOUT TIMELINE                                        │
└─────────────────────────────────────────────────────────────────────────────┘

    WEEK 1: Database Migration
    ├─ Apply migration to staging
    ├─ Verify data migration (all users have user_type_id)
    ├─ Test permission functions
    ├─ Performance benchmarks
    └─ Status: Foundation Ready ✓

    WEEK 2: Middleware Layer
    ├─ Deploy new permissions.js
    ├─ Update organization-context.js
    ├─ Write unit tests
    ├─ Deploy to staging
    └─ Status: Backwards Compatible ✓

    WEEK 3: Route Updates
    ├─ Update admin.js
    ├─ Update users.js
    ├─ Update workflow.js
    ├─ Update integration tests
    └─ Status: New API Active ✓

    WEEK 4: Frontend + Production
    ├─ Update admin templates
    ├─ Update dashboard templates
    ├─ Update RLS policies
    ├─ Deploy to production
    └─ Status: Migration Complete ✓


┌─────────────────────────────────────────────────────────────────────────────┐
│                     DECISION MATRIX                                         │
└─────────────────────────────────────────────────────────────────────────────┘

    When to use each permission pattern:

    ┌──────────────────────────┬─────────────────────────────────────┐
    │ Use Case                 │ Recommended Approach                │
    ├──────────────────────────┼─────────────────────────────────────┤
    │ Platform admin only      │ requireGlobalPermission(...)        │
    │ Organization admin       │ requireRole('admin')                │
    │ Specific action          │ requireOrgPermission('can_...')     │
    │ Workflow approval        │ hasOrgPermission + custom logic     │
    │ Simple role check        │ hasRole(req, 'member')              │
    │ Complex permissions      │ getEffectivePermissions(req)        │
    └──────────────────────────┴─────────────────────────────────────┘


╔═══════════════════════════════════════════════════════════════════════════════╗
║                            CONCLUSION                                         ║
╠═══════════════════════════════════════════════════════════════════════════════╣
║                                                                               ║
║  OLD SYSTEM:                           NEW SYSTEM:                            ║
║  ❌ Scattered permissions              ✅ Centralized permissions              ║
║  ❌ RLS recursion issues               ✅ No recursion (clean lookups)        ║
║  ❌ Dual is_global_admin locations     ✅ Single user_type_id                 ║
║  ❌ String-based roles (typos)         ✅ Type-safe role IDs                  ║
║  ❌ Slow permission checks (80-200ms)  ✅ Fast checks (20-50ms)               ║
║  ❌ Unclear upgrade path               ✅ Backwards compatible migration      ║
║                                                                               ║
║  RECOMMENDATION: Approve and implement this architecture                      ║
║                                                                               ║
╚═══════════════════════════════════════════════════════════════════════════════╝
