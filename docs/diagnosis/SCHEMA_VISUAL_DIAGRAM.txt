================================================================================
DATABASE SCHEMA DIAGRAM: User Types and Organizations
================================================================================

┌────────────────────────────────────────────────────────────────────────────┐
│                        PERMISSION ARCHITECTURE                             │
└────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│  PLATFORM LEVEL (Global)                                                    │
│  ━━━━━━━━━━━━━━━━━━━━━━━━                                                    │
│                                                                             │
│  ┌───────────────────────────┐                                             │
│  │   user_types              │                                             │
│  ├───────────────────────────┤                                             │
│  │ id (PK)                   │                                             │
│  │ type_code (UNIQUE)        │  ← 'global_admin' or 'regular_user'        │
│  │ type_name                 │                                             │
│  │ global_permissions (JSON) │  ← Platform-wide access                     │
│  │ is_system_type            │                                             │
│  └───────────────────────────┘                                             │
│           ▲                                                                 │
│           │ Referenced by users.user_type_id                               │
│           │                                                                 │
│  ┌───────────────────────────┐                                             │
│  │   users                   │                                             │
│  ├───────────────────────────┤                                             │
│  │ id (PK)                   │                                             │
│  │ email (UNIQUE)            │                                             │
│  │ user_type_id (FK) ────────┘  ❌ OFTEN NULL (bug!)                      │
│  │ name                      │                                             │
│  │ auth_provider             │                                             │
│  └───────────────────────────┘                                             │
│                                                                             │
└─────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│  ORGANIZATION LEVEL (Per-Tenant)                                            │
│  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━                                              │
│                                                                             │
│  ┌───────────────────────────┐                                             │
│  │   organizations           │                                             │
│  ├───────────────────────────┤                                             │
│  │ id (PK)                   │                                             │
│  │ name                      │                                             │
│  │ slug (UNIQUE)             │                                             │
│  │ hierarchy_config (JSON)   │                                             │
│  └───────────────────────────┘                                             │
│           ▲                                                                 │
│           │                                                                 │
│  ┌────────┴──────────────────────────────────────┐                         │
│  │   user_organizations (Junction Table)         │                         │
│  ├────────────────────────────────────────────────┤                        │
│  │ id (PK)                                        │                         │
│  │ user_id (FK) → users.id                        │                         │
│  │ organization_id (FK) → organizations.id        │                         │
│  │ role (VARCHAR) ← OLD COLUMN ⚠️  deprecated     │                         │
│  │ org_role_id (FK) ────┐                         │                         │
│  │ is_active            │                         │                         │
│  └──────────────────────┼─────────────────────────┘                         │
│                         │                                                   │
│                         ▼                                                   │
│  ┌───────────────────────────────────────┐                                 │
│  │   organization_roles                  │                                 │
│  ├───────────────────────────────────────┤                                 │
│  │ id (PK)                               │                                 │
│  │ role_code (UNIQUE)  ← 'owner', 'admin', 'member', 'viewer'             │
│  │ role_name                             │                                 │
│  │ hierarchy_level  ← 4=owner, 3=admin, 2=member, 1=viewer                │
│  │ org_permissions (JSON)                │                                 │
│  └───────────────────────────────────────┘                                 │
│                                                                             │
└─────────────────────────────────────────────────────────────────────────────┘

================================================================================
DATA FLOW: How Users Get Assigned Types and Roles
================================================================================

SCENARIO 1: SETUP WIZARD (First Organization Creator)
══════════════════════════════════════════════════════

┌───────────────────────────────────────────────────────────────────────────┐
│ Step 1: POST /setup/organization                                         │
├───────────────────────────────────────────────────────────────────────────┤
│ • Create Supabase Auth user                                              │
│ • Store user_id in session                                               │
│ • Flag: is_first_org = true                                              │
└───────────────────────────────────────────────────────────────────────────┘
                              ▼
┌───────────────────────────────────────────────────────────────────────────┐
│ Step 2: POST /setup/complete                                             │
├───────────────────────────────────────────────────────────────────────────┤
│ 1. Create organization record                                            │
│ 2. Query user_types table: ❌ FAILS HERE if RLS enabled!                │
│    SELECT id FROM user_types                                             │
│    WHERE type_code = 'global_admin'  ← First org creator gets this      │
│ 3. Update users.user_type_id = global_admin                             │
│ 4. Query organization_roles table:                                       │
│    SELECT id FROM organization_roles                                     │
│    WHERE role_code = 'owner'  ← First org creator gets owner            │
│ 5. Create user_organizations link:                                      │
│    INSERT INTO user_organizations (                                      │
│      user_id, organization_id,                                           │
│      role='owner',  ← OLD column (deprecated)                            │
│      org_role_id=owner_role.id  ← NEW column (correct)                   │
│    )                                                                      │
└───────────────────────────────────────────────────────────────────────────┘

RESULT:
━━━━━━
users table:
  user_type_id → user_types(global_admin)  ✅ First org admin

user_organizations table:
  role → 'owner'  ✅ (old column)
  org_role_id → organization_roles(owner)  ✅ (new column)


SCENARIO 2: INVITATION ACCEPTANCE
══════════════════════════════════

┌───────────────────────────────────────────────────────────────────────────┐
│ Step 1: POST /auth/accept-invite                                         │
├───────────────────────────────────────────────────────────────────────────┤
│ 1. Find or create Supabase Auth user                                    │
│ 2. Call upsertUser() → creates users record                             │
│ 3. ❌ BUG: Does NOT set user_type_id!                                   │
│ 4. Create user_organizations:                                           │
│    INSERT INTO user_organizations (                                      │
│      role='member',  ← From invitation                                   │
│      org_role_id=member_role.id  ← Looked up from organization_roles    │
│    )                                                                      │
└───────────────────────────────────────────────────────────────────────────┘

RESULT:
━━━━━━
users table:
  user_type_id → NULL  ❌ BUG! Should be 'regular_user'

user_organizations table:
  role → 'member'  ✅
  org_role_id → organization_roles(member)  ✅


SCENARIO 3: SELF REGISTRATION
══════════════════════════════

┌───────────────────────────────────────────────────────────────────────────┐
│ Step 1: POST /auth/register                                              │
├───────────────────────────────────────────────────────────────────────────┤
│ 1. Create Supabase Auth user                                            │
│ 2. Call upsertUser() → creates users record                             │
│ 3. ❌ BUG: Does NOT set user_type_id!                                   │
│ 4. IF organizationId provided:                                          │
│    Create user_organizations with role='member'                         │
└───────────────────────────────────────────────────────────────────────────┘

RESULT:
━━━━━━
users table:
  user_type_id → NULL  ❌ BUG! Should be 'regular_user'

user_organizations table:
  role → 'member'  ✅
  org_role_id → organization_roles(member)  ✅

================================================================================
THE PROBLEM VISUALIZED
================================================================================

EXPECTED STATE (After Migration 024)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

user_types:
┌────────────┬──────────────┬─────────────────────────────────────┐
│ type_code  │ type_name    │ global_permissions                  │
├────────────┼──────────────┼─────────────────────────────────────┤
│global_admin│Global Admin  │ can_access_all_organizations: true  │
│regular_user│Regular User  │ can_access_all_organizations: false │
└────────────┴──────────────┴─────────────────────────────────────┘
         ▲                           ▲
         │                           │
         │                           │
users:   │                           │
┌────────┴─────┬──────────────┬──────┴──────────┬───────┐
│ id           │ email        │ user_type_id    │ name  │
├──────────────┼──────────────┼─────────────────┼───────┤
│ abc-123-xyz  │admin@org.com │ global_admin_id │ Admin │ ✅ First org
│ def-456-uvw  │user@org.com  │ regular_user_id │ User  │ ✅ Invited user
└──────────────┴──────────────┴─────────────────┴───────┘


ACTUAL STATE (With Bug)
━━━━━━━━━━━━━━━━━━━━━━━

users:
┌──────────────┬──────────────┬─────────────┬───────┐
│ id           │ email        │user_type_id │ name  │
├──────────────┼──────────────┼─────────────┼───────┤
│ abc-123-xyz  │admin@org.com │ global_... ✅│ Admin │ Setup worked
│ def-456-uvw  │user@org.com  │ NULL    ❌  │ User  │ Invitation bug!
│ ghi-789-rst  │new@org.com   │ NULL    ❌  │ New   │ Registration bug!
└──────────────┴──────────────┴─────────────┴───────┘

================================================================================
RLS ISSUE DIAGRAM
================================================================================

SETUP WIZARD QUERY:
───────────────────

SELECT id FROM user_types WHERE type_code = 'global_admin'
│
├─ Supabase checks RLS policies
│  │
│  ├─ Policy: "Anyone can read user types"
│  │  USING (true)  ← Should allow SELECT ✅
│  │
│  └─ Policy: "Global admins can manage user types"
│     USING (EXISTS (
│       SELECT 1 FROM users
│       WHERE id = auth.uid()  ← ❌ auth.uid() = NULL during setup!
│     ))
│
└─ Result: RLS check fails
   └─ Supabase returns: "relation 'user_types' does not exist"
      └─ ❌ MISLEADING ERROR! Table exists, RLS is blocking!


SOLUTION:
─────────

ALTER TABLE user_types DISABLE ROW LEVEL SECURITY;
ALTER TABLE organization_roles DISABLE ROW LEVEL SECURITY;

Why disable RLS?
• These are REFERENCE tables (lookup data)
• Not user-specific data (no privacy concern)
• Need to be accessible during setup (before authentication)
• Content is the same for all users

================================================================================
MIGRATION TIMELINE
================================================================================

001_generalized_schema.sql
├─ Creates: users, user_organizations, organizations
├─ Status: ✅ Applied
└─ Result: Base tables exist

024_permissions_architecture.sql
├─ Creates: user_types, organization_roles
├─ Adds: users.user_type_id, user_organizations.org_role_id
├─ Enables: RLS on user_types and organization_roles
├─ Status: ✅ Applied (tables exist, RLS enabled)
└─ Problem: ❌ RLS blocks setup queries!

030_disable_rls_CORRECTED.sql
├─ Disables: RLS on user_types, organization_roles
├─ Status: ❓ UNKNOWN - Needs verification!
└─ Solution: Run this migration to fix RLS issue

================================================================================
FIX PRIORITY
================================================================================

PRIORITY 1 (NOW): Database Fix
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
✅ Run: fix_user_types_immediate.sql
   • Disables RLS on permission tables
   • Assigns user_type_id to existing users
   • Takes 5 minutes

PRIORITY 2 (NEXT): Code Fix - Registration
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📝 Add user_type_id assignment to:
   • /src/routes/auth.js line 232 (registration)
   • Takes 10 minutes

PRIORITY 3 (NEXT): Code Fix - Invitation
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📝 Add user_type_id assignment to:
   • /src/routes/auth.js line 1125 (invitation)
   • Takes 10 minutes

PRIORITY 4 (LATER): Testing
━━━━━━━━━━━━━━━━━━━━━━━━━━━
🧪 Add integration tests for:
   • Setup wizard completion
   • User registration
   • Invitation acceptance
   • Takes 1 hour

================================================================================
