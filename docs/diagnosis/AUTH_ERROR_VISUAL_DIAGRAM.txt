# 🔍 Authentication Error Flow - Visual Diagram

## THE BROKEN FLOW (Before Fix)

```
┌─────────────────────────────────────────────────────────────┐
│  1. USER REGISTRATION                                       │
├─────────────────────────────────────────────────────────────┤
│  POST /auth/register                                        │
│    ↓                                                        │
│  upsertUser(supabase, authUser)                            │
│    ↓                                                        │
│  INSERT INTO users {                                        │
│    id: 'uuid',                                             │
│    email: 'user@domain.com',                               │
│    name: 'John Doe',                                       │
│    user_type_id: NULL  ← ❌ MISSING!                       │
│  }                                                          │
│    ↓                                                        │
│  ✅ User created in database                               │
└─────────────────────────────────────────────────────────────┘
                        ↓
┌─────────────────────────────────────────────────────────────┐
│  2. USER LOGIN                                              │
├─────────────────────────────────────────────────────────────┤
│  POST /auth/login                                           │
│    ↓                                                        │
│  Supabase Auth: signInWithPassword()                       │
│    ↓                                                        │
│  ✅ Authentication succeeds                                │
│  ✅ Session created                                        │
│  ✅ User redirected to /dashboard                          │
└─────────────────────────────────────────────────────────────┘
                        ↓
┌─────────────────────────────────────────────────────────────┐
│  3. PERMISSION MIDDLEWARE (attachPermissions)               │
├─────────────────────────────────────────────────────────────┤
│  GET /dashboard                                             │
│    ↓                                                        │
│  attachPermissions middleware runs                          │
│    ↓                                                        │
│  getUserType(userId)                                        │
│    ↓                                                        │
│  SELECT user_types.type_code                               │
│  FROM users                                                 │
│  INNER JOIN user_types                                      │
│    ON users.user_type_id = user_types.id  ← JOIN FAILS!   │
│  WHERE users.id = 'uuid'                                   │
│    ↓                                                        │
│  INNER JOIN Result:                                         │
│    users.user_type_id = NULL                               │
│    NULL != user_types.id (any value)                       │
│    → No matching rows                                       │
│    ↓                                                        │
│  .single() expects 1 row, got 0 rows                       │
│    ↓                                                        │
│  ❌ ERROR PGRST116                                         │
│  "Cannot coerce the result to a single JSON object"        │
│    ↓                                                        │
│  Console: [Permissions] Error getting user type            │
│    ↓                                                        │
│  Application crashes or permissions fail                    │
└─────────────────────────────────────────────────────────────┘

## THE WORKING FLOW (After Fix)

```
┌─────────────────────────────────────────────────────────────┐
│  1. USER REGISTRATION (FIXED)                               │
├─────────────────────────────────────────────────────────────┤
│  POST /auth/register                                        │
│    ↓                                                        │
│  upsertUser(supabase, authUser)                            │
│    ↓                                                        │
│  // NEW: Get user_type_id first                            │
│  SELECT id FROM user_types                                  │
│  WHERE type_code = 'regular_user'                          │
│    ↓                                                        │
│  userTypeId = 'abc-123-def-456'  ✅                        │
│    ↓                                                        │
│  INSERT INTO users {                                        │
│    id: 'uuid',                                             │
│    email: 'user@domain.com',                               │
│    name: 'John Doe',                                       │
│    user_type_id: 'abc-123-def-456'  ← ✅ FIXED!           │
│  }                                                          │
│    ↓                                                        │
│  ✅ User created with valid user_type_id                   │
└─────────────────────────────────────────────────────────────┘
                        ↓
┌─────────────────────────────────────────────────────────────┐
│  2. USER LOGIN                                              │
├─────────────────────────────────────────────────────────────┤
│  POST /auth/login                                           │
│    ↓                                                        │
│  Supabase Auth: signInWithPassword()                       │
│    ↓                                                        │
│  ✅ Authentication succeeds                                │
│  ✅ Session created                                        │
│  ✅ User redirected to /dashboard                          │
└─────────────────────────────────────────────────────────────┘
                        ↓
┌─────────────────────────────────────────────────────────────┐
│  3. PERMISSION MIDDLEWARE (WORKING)                         │
├─────────────────────────────────────────────────────────────┤
│  GET /dashboard                                             │
│    ↓                                                        │
│  attachPermissions middleware runs                          │
│    ↓                                                        │
│  getUserType(userId)                                        │
│    ↓                                                        │
│  SELECT user_types.type_code                               │
│  FROM users                                                 │
│  INNER JOIN user_types                                      │
│    ON users.user_type_id = user_types.id  ← JOIN WORKS!   │
│  WHERE users.id = 'uuid'                                   │
│    ↓                                                        │
│  INNER JOIN Result:                                         │
│    users.user_type_id = 'abc-123-def-456'                  │
│    user_types.id = 'abc-123-def-456'                       │
│    → Match found! ✅                                        │
│    ↓                                                        │
│  Returns: { type_code: 'regular_user' }                    │
│    ↓                                                        │
│  .single() gets exactly 1 row ✅                           │
│    ↓                                                        │
│  req.userType = 'regular_user'                             │
│  req.permissions = { ... }                                  │
│    ↓                                                        │
│  ✅ Dashboard renders successfully                         │
│  ✅ User sees their content                                │
│  ✅ No errors in console                                   │
└─────────────────────────────────────────────────────────────┘

## DATABASE STATE COMPARISON

### BEFORE FIX:

┌──────────────────────────────────────────────┐
│  users table                                 │
├──────────────────────────────────────────────┤
│  id                  │ user_type_id         │
│  2234d0d2-60d5...    │ NULL        ← ❌     │
└──────────────────────────────────────────────┘
                        ↓
┌──────────────────────────────────────────────┐
│  user_types table                            │
├──────────────────────────────────────────────┤
│  id              │ type_code                 │
│  abc-123-def...  │ global_admin             │
│  xyz-789-ghi...  │ regular_user             │
└──────────────────────────────────────────────┘

  INNER JOIN: NULL != abc-123-def... ❌
  INNER JOIN: NULL != xyz-789-ghi... ❌
  Result: 0 rows → PGRST116 error


### AFTER FIX (Migration 031 + Code Fix):

┌──────────────────────────────────────────────┐
│  users table                                 │
├──────────────────────────────────────────────┤
│  id                  │ user_type_id         │
│  2234d0d2-60d5...    │ xyz-789-ghi... ← ✅  │
└──────────────────────────────────────────────┘
                        ↓
┌──────────────────────────────────────────────┐
│  user_types table                            │
├──────────────────────────────────────────────┤
│  id              │ type_code                 │
│  abc-123-def...  │ global_admin             │
│  xyz-789-ghi...  │ regular_user  ← MATCH!   │
└──────────────────────────────────────────────┘

  INNER JOIN: xyz-789-ghi... == xyz-789-ghi... ✅
  Result: 1 row → { type_code: 'regular_user' }


## CODE CHANGES REQUIRED

### File: /src/routes/auth.js (Lines 98-116)

┌──────────────────────────────────────────────────────────────┐
│  BEFORE (Missing user_type_id assignment)                   │
├──────────────────────────────────────────────────────────────┤
│                                                              │
│  async function upsertUser(supabase, authUser) {            │
│    const { data, error } = await supabase                   │
│      .from('users')                                          │
│      .upsert({                                               │
│        id: authUser.id,                                      │
│        email: authUser.email,                                │
│        name: authUser.user_metadata?.name || null,          │
│        // ❌ user_type_id is MISSING!                       │
│      })                                                      │
│      .select()                                               │
│      .single();                                              │
│                                                              │
│    if (error) throw error;                                   │
│    return data;                                              │
│  }                                                           │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  AFTER (With user_type_id lookup and assignment)            │
├──────────────────────────────────────────────────────────────┤
│                                                              │
│  async function upsertUser(supabase, authUser) {            │
│    // ✅ NEW: Get regular_user type_id                      │
│    const { data: userType, error: typeError } = await supabase │
│      .from('user_types')                                     │
│      .select('id')                                           │
│      .eq('type_code', 'regular_user')                       │
│      .single();                                              │
│                                                              │
│    if (typeError) {                                          │
│      throw new Error(`Failed to get user type: ${typeError}`); │
│    }                                                         │
│                                                              │
│    const { data, error } = await supabase                   │
│      .from('users')                                          │
│      .upsert({                                               │
│        id: authUser.id,                                      │
│        email: authUser.email,                                │
│        name: authUser.user_metadata?.name || null,          │
│        user_type_id: userType.id,  // ✅ FIXED!             │
│      })                                                      │
│      .select()                                               │
│      .single();                                              │
│                                                              │
│    if (error) throw error;                                   │
│    return data;                                              │
│  }                                                           │
└──────────────────────────────────────────────────────────────┘


## MIGRATION 031: Data Backfill

┌──────────────────────────────────────────────────────────────┐
│  What Migration 031 Does                                     │
├──────────────────────────────────────────────────────────────┤
│                                                              │
│  1. Find all users with user_type_id = NULL                 │
│     SELECT COUNT(*) FROM users WHERE user_type_id IS NULL   │
│       → Returns: 1 user (2234d0d2-60d5...)                  │
│                                                              │
│  2. Get the 'regular_user' type UUID                        │
│     SELECT id FROM user_types                                │
│     WHERE type_code = 'regular_user'                        │
│       → Returns: xyz-789-ghi-456                            │
│                                                              │
│  3. Backfill all NULL users                                 │
│     UPDATE users                                             │
│     SET user_type_id = 'xyz-789-ghi-456'                    │
│     WHERE user_type_id IS NULL                              │
│       → Updated: 1 row                                       │
│                                                              │
│  4. Verify the fix                                          │
│     SELECT COUNT(*) FROM users WHERE user_type_id IS NULL   │
│       → Returns: 0 (all fixed!) ✅                          │
└──────────────────────────────────────────────────────────────┘


## THE FIX SUMMARY

┌───────────────────────────────────────────┐
│  Problem:                                 │
│  • User registration doesn't set          │
│    user_type_id                          │
│  • Permission queries fail with NULL FK   │
│  • INNER JOIN returns 0 rows             │
│  • Application crashes                    │
└───────────────────────────────────────────┘
                ↓
┌───────────────────────────────────────────┐
│  Fix Part 1: Database (Migration 031)    │
│  • Backfill existing users               │
│  • Set user_type_id = regular_user       │
│  • All existing users can now login ✅   │
└───────────────────────────────────────────┘
                ↓
┌───────────────────────────────────────────┐
│  Fix Part 2: Code (auth.js)              │
│  • Lookup user_type_id before insert     │
│  • Set user_type_id in upsertUser()      │
│  • New users created correctly ✅        │
└───────────────────────────────────────────┘
                ↓
┌───────────────────────────────────────────┐
│  Result:                                  │
│  ✅ Existing users can login             │
│  ✅ New users work correctly             │
│  ✅ Permissions middleware succeeds      │
│  ✅ No more PGRST116 errors              │
│  ✅ Dashboard loads successfully         │
└───────────────────────────────────────────┘


## Error Code Reference

┌──────────────────────────────────────────────────────────────┐
│  PGRST116: Cannot coerce the result to a single JSON object │
├──────────────────────────────────────────────────────────────┤
│  Meaning:  Query returned 0 rows but .single() expects 1    │
│  Cause:    INNER JOIN failed (NULL foreign key)             │
│  Solution: Populate user_type_id for all users              │
└──────────────────────────────────────────────────────────────┘


*Case solved by DETECTIVE "WHO DONE IT?"*
*The mystery of the missing user types is revealed!* 🔍✨
