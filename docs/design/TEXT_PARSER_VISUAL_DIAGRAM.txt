╔═══════════════════════════════════════════════════════════════════════════════╗
║                     TEXT PARSER ARCHITECTURE DIAGRAM                          ║
║                                                                               ║
║  Visual representation of .txt/.md file parsing flow                         ║
╚═══════════════════════════════════════════════════════════════════════════════╝


┌─────────────────────────────────────────────────────────────────────────────┐
│                           FILE UPLOAD FLOW                                  │
└─────────────────────────────────────────────────────────────────────────────┘

User Upload
    │
    ▼
┌─────────────┐
│ File Type?  │
└──────┬──────┘
       │
       ├──── .docx/.doc ──────────┐
       │                          │
       ├──── .txt ────────┐       │
       │                  │       │
       └──── .md ─────┐   │       │
                      │   │       │
                      ▼   ▼       ▼
                ┌─────────────────────┐
                │ MIME Type Validator │
                └──────────┬──────────┘
                           │
                           ▼
                ┌─────────────────────┐
                │  detectFileType()   │
                │  Returns:           │
                │  - 'word'           │
                │  - 'text'           │
                │  - 'markdown'       │
                └──────────┬──────────┘
                           │
                ┌──────────┴───────────┐
                │                      │
                ▼                      ▼
        ┌──────────────┐      ┌──────────────┐
        │ Word Parser  │      │ Text Parser  │
        │ (existing)   │      │   (NEW!)     │
        └──────────────┘      └──────────────┘
                │                      │
                └──────────┬───────────┘
                           │
                           ▼
                ┌─────────────────────┐
                │  Sections Array     │
                │  (same structure)   │
                └──────────┬──────────┘
                           │
                           ▼
                ┌─────────────────────┐
                │  Database Insert    │
                │  (document_sections)│
                └─────────────────────┘


┌─────────────────────────────────────────────────────────────────────────────┐
│                       TEXT PARSER INTERNAL FLOW                             │
└─────────────────────────────────────────────────────────────────────────────┘

parseDocument(filePath, organizationConfig, documentId)
    │
    ├─── 1. Check hierarchy override (database)
    │    └─── If documentId exists, load custom hierarchy
    │
    ├─── 2. Detect file type from extension
    │    ├─── .txt → isMarkdown = false
    │    └─── .md → isMarkdown = true
    │
    ├─── 3. Read file as UTF-8 text
    │    ├─── Try: fs.readFile(filePath, 'utf-8')
    │    └─── Fallback: fs.readFile(filePath, 'latin1')
    │
    ├─── 4. Normalize line endings
    │    └─── \r\n → \n, \r → \n
    │
    ├─── 5. Preprocess Markdown (optional)
    │    └─── If isMarkdown: convert "# Article I" → "Article I"
    │
    ├─── 6. Parse sections ──────────┐
    │                                 │
    └─────────────────────────────────┘

parseSections(text, organizationConfig)
    │
    ├─── 1. Split into lines array
    │
    ├─── 2. Detect Table of Contents (optional)
    │    └─── For .txt/.md: usually return empty Set
    │
    ├─── 3. HierarchyDetector.detectHierarchy()
    │    │   (REUSED from existing system)
    │    │
    │    └─── Returns: [
    │           { type: 'article', number: 'I', prefix: 'Article ', index: 0 },
    │           { type: 'section', number: '1', prefix: 'Section ', index: 45 },
    │           ...
    │         ]
    │
    ├─── 4. Filter out TOC items
    │    └─── Remove detected items that appear in TOC lines
    │
    ├─── 5. Build header lines map
    │    ├─── For each detected item:
    │    │    └─── Find which line it appears on
    │    ├─── Create Set of header line numbers
    │    └─── Create Map of lineNumber → detectedItem
    │
    ├─── 6. State Machine: Parse line by line
    │    │
    │    │   Current State: {
    │    │     currentSection: null,
    │    │     currentText: [],
    │    │     sections: []
    │    │   }
    │    │
    │    └─── For each line:
    │         ├─── If line is TOC → skip
    │         ├─── If line is header:
    │         │    ├─── Save previous section
    │         │    ├─── Extract title from header
    │         │    ├─── Create new currentSection
    │         │    └─── Reset currentText
    │         └─── If line is content:
    │              └─── Append to currentText
    │
    ├─── 7. Save last section
    │
    ├─── 8. Capture orphaned content
    │    └─── Text not assigned to any section
    │         ├─── Before first section → preamble
    │         ├─── Between sections → attach to nearest
    │         └─── After last section → unnumbered section
    │
    ├─── 9. Enrich sections with metadata
    │    │   (REUSED from WordParser)
    │    │
    │    └─── enrichSections() adds:
    │         ├─── depth (contextual, stack-based)
    │         ├─── ordinal (sequence number)
    │         ├─── citations (hierarchical)
    │         ├─── article_number
    │         ├─── section_number
    │         └─── parentPath
    │
    ├─── 10. Deduplicate sections
    │     │   (REUSED from WordParser)
    │     │
    │     └─── deduplicateSections() removes:
    │          └─── Duplicate citations (from TOC + body)
    │
    └─── 11. Return sections array


┌─────────────────────────────────────────────────────────────────────────────┐
│                      DEPTH CALCULATION ALGORITHM                            │
│                      (Context-Aware Hierarchy)                              │
└─────────────────────────────────────────────────────────────────────────────┘

Example Document:
    ARTICLE I NAME          → type: article
    Section 1: Purpose      → type: section
    Subsection A: Details   → type: subsection
    Section 2: Membership   → type: section

enrichSectionsWithContext(sections, levels)
    │
    ├─── Initialize: hierarchyStack = []
    │
    ├─── For each section:
    │    │
    │    ├─── Get priority (higher = higher in hierarchy):
    │    │    ├─── article: 100
    │    │    ├─── section: 90
    │    │    └─── subsection: 80
    │    │
    │    ├─── Pop stack until finding parent:
    │    │    └─── While stackTop.priority ≥ current.priority:
    │    │         └─── stack.pop()
    │    │
    │    ├─── Calculate depth = stack.length
    │    │
    │    ├─── If type === 'article': depth = 0 (override)
    │    │
    │    ├─── Build parentPath from stack
    │    │
    │    └─── Push current section to stack
    │
    └─── Return enriched sections

Example Result:
    ARTICLE I NAME          → depth: 0, parentPath: ''
    Section 1: Purpose      → depth: 1, parentPath: 'Article I'
    Subsection A: Details   → depth: 2, parentPath: 'Article I > Section 1'
    Section 2: Membership   → depth: 1, parentPath: 'Article I'


┌─────────────────────────────────────────────────────────────────────────────┐
│                    CODE REUSE VISUALIZATION                                 │
└─────────────────────────────────────────────────────────────────────────────┘

┌────────────────────────┐          ┌────────────────────────┐
│    WordParser.js       │          │    TextParser.js       │
│    (Existing)          │          │    (NEW)               │
│                        │          │                        │
│  ┌──────────────────┐ │          │  ┌──────────────────┐  │
│  │ mammoth library  │ │          │  │ fs.readFile()    │  │
│  │ (binary parsing) │ │          │  │ (direct text)    │  │
│  └────────┬─────────┘ │          │  └────────┬─────────┘  │
│           │           │          │           │             │
│           ▼           │          │           ▼             │
│  ┌──────────────────┐ │          │  ┌──────────────────┐  │
│  │ Extract text     │ │          │  │ Normalize text   │  │
│  └────────┬─────────┘ │          │  └────────┬─────────┘  │
│           │           │          │           │             │
│           └───────────┼──────────┼───────────┘             │
│                       │          │                         │
│                       ▼          ▼                         │
│              ┌─────────────────────────┐                   │
│              │  HierarchyDetector      │                   │
│              │  (SHARED, reused)       │                   │
│              └────────┬────────────────┘                   │
│                       │                                    │
│  ┌────────────────────┴────────────────────┐              │
│  │  SHARED METHODS (copy from WordParser): │              │
│  │  - extractTitleAndContent()             │              │
│  │  - buildCitation()                      │              │
│  │  - enrichSections()                     │              │
│  │  - enrichSectionsWithContext()          │              │
│  │  - deduplicateSections()                │              │
│  │  - cleanText()                          │              │
│  │  - normalizeForMatching()               │              │
│  │  - captureOrphanedContent()             │              │
│  │  - attachOrphansToSections()            │              │
│  │  - validateSections()                   │              │
│  │  - generatePreview()                    │              │
│  │  - getDepthDistribution()               │              │
│  └─────────────────────────────────────────┘              │
│                                                            │
└────────────────────────────────────────────────────────────┘

Code Reuse: ~90%
New Code: ~10% (file I/O, Markdown preprocessing)


┌─────────────────────────────────────────────────────────────────────────────┐
│                         PERFORMANCE COMPARISON                              │
└─────────────────────────────────────────────────────────────────────────────┘

┌─────────────┬──────────────────┬──────────────────┬──────────────────┐
│   Parser    │   File Format    │   Parse Time     │   Memory Usage   │
├─────────────┼──────────────────┼──────────────────┼──────────────────┤
│ WordParser  │ .docx            │ ████████████████ │ ████████████████ │
│             │                  │ 500-1000ms       │ 10-20MB          │
├─────────────┼──────────────────┼──────────────────┼──────────────────┤
│ TextParser  │ .txt             │ ██               │ ██               │
│             │                  │ 50-100ms         │ 1-2MB            │
├─────────────┼──────────────────┼──────────────────┼──────────────────┤
│ TextParser  │ .md              │ ███              │ ███              │
│             │                  │ 75-150ms         │ 2-4MB            │
└─────────────┴──────────────────┴──────────────────┴──────────────────┘

Speed Improvement: 5-10x faster! ⚡
Memory Improvement: 80-90% less! 💾


┌─────────────────────────────────────────────────────────────────────────────┐
│                     DATABASE SCHEMA (UNCHANGED)                             │
└─────────────────────────────────────────────────────────────────────────────┘

document_sections table:
┌──────────────────┬──────────────────┬────────────────────────────────────┐
│     Column       │       Type       │          Description               │
├──────────────────┼──────────────────┼────────────────────────────────────┤
│ id               │ UUID             │ Primary key                        │
│ document_id      │ UUID             │ Foreign key to documents           │
│ type             │ VARCHAR(50)      │ 'article', 'section', etc.         │
│ number           │ VARCHAR(20)      │ 'I', '1', 'A', etc.                │
│ title            │ TEXT             │ Section title                      │
│ citation         │ VARCHAR(255)     │ 'Article I, Section 1'             │
│ text             │ TEXT             │ Section content                    │
│ original_text    │ TEXT             │ Original content                   │
│ depth            │ INTEGER          │ 0, 1, 2, etc. (contextual)         │
│ ordinal          │ INTEGER          │ 1, 2, 3, etc. (sequence)           │
│ parent_section_id│ UUID             │ Parent section (for tree)          │
│ ...              │ ...              │ (other fields)                     │
└──────────────────┴──────────────────┴────────────────────────────────────┘

✅ Same structure for ALL parsers (Word, Text, Markdown)
✅ No schema changes needed
✅ No migrations required


┌─────────────────────────────────────────────────────────────────────────────┐
│                        EXAMPLE TEXT DOCUMENT                                │
└─────────────────────────────────────────────────────────────────────────────┘

Input File: bylaws.txt
──────────────────────────────────────────────────────────────────────────────
ARTICLE I NAME

This organization shall be called the Test Organization.

Section 1: Purpose

The purpose of this organization is to provide testing services.

Section 2: Membership

Membership is open to all qualified members.

ARTICLE II GOVERNANCE

Section 1: Board Structure

The board shall consist of elected members.

Subsection A: Officers

(a) President
(b) Vice President
(c) Secretary
──────────────────────────────────────────────────────────────────────────────

Parsed Output (sections array):
──────────────────────────────────────────────────────────────────────────────
[
  {
    type: 'article',
    number: 'I',
    title: 'NAME',
    citation: 'Article I',
    text: 'This organization shall be called the Test Organization.',
    depth: 0,
    ordinal: 1
  },
  {
    type: 'section',
    number: '1',
    title: 'Purpose',
    citation: 'Article I, Section 1',
    text: 'The purpose of this organization is to provide testing services.',
    depth: 1,
    ordinal: 2,
    parentPath: 'Article I'
  },
  {
    type: 'section',
    number: '2',
    title: 'Membership',
    citation: 'Article I, Section 2',
    text: 'Membership is open to all qualified members.',
    depth: 1,
    ordinal: 3,
    parentPath: 'Article I'
  },
  {
    type: 'article',
    number: 'II',
    title: 'GOVERNANCE',
    citation: 'Article II',
    text: '',
    depth: 0,
    ordinal: 4
  },
  {
    type: 'section',
    number: '1',
    title: 'Board Structure',
    citation: 'Article II, Section 1',
    text: 'The board shall consist of elected members.',
    depth: 1,
    ordinal: 5,
    parentPath: 'Article II'
  },
  {
    type: 'subsection',
    number: 'A',
    title: 'Officers',
    citation: 'Article II, Section 1, Subsection A',
    text: '(a) President\n(b) Vice President\n(c) Secretary',
    depth: 2,
    ordinal: 6,
    parentPath: 'Article II > Section 1'
  }
]
──────────────────────────────────────────────────────────────────────────────


┌─────────────────────────────────────────────────────────────────────────────┐
│                     IMPLEMENTATION TIME BREAKDOWN                           │
└─────────────────────────────────────────────────────────────────────────────┘

Total Time: 4-6 hours
──────────────────────────────────────────────────────────────────────────────

Phase 1: Core Parser (2-3 hours)
    │
    ├─── Create textParser.js file                        [15 min]
    ├─── Implement parseDocument() entry point            [30 min]
    ├─── Implement parseSections() main logic             [45 min]
    ├─── Copy shared methods from wordParser              [45 min]
    └─── Implement preprocessMarkdown() (optional)        [30 min]

Phase 2: Integration (1 hour)
    │
    ├─── Update MIME types in admin.js                    [10 min]
    ├─── Create detectFileType() helper                   [10 min]
    ├─── Update upload handler with switch/case           [20 min]
    └─── Test file upload flow                            [20 min]

Phase 3: Testing (1-2 hours)
    │
    ├─── Create test fixtures (.txt, .md files)           [20 min]
    ├─── Write unit tests                                 [30 min]
    ├─── Write integration tests                          [20 min]
    ├─── Manual testing in browser                        [20 min]
    └─── Verify database insertion                        [10 min]

Phase 4: Documentation (30 minutes)
    │
    ├─── Add JSDoc comments                               [15 min]
    └─── Update README and user guide                     [15 min]

──────────────────────────────────────────────────────────────────────────────
Fast-Track (3 hours): Skip Markdown preprocessing, minimal tests
Standard (4-6 hours): Full implementation with tests
Extended (8 hours): Add PDF support and enhanced features


┌─────────────────────────────────────────────────────────────────────────────┐
│                           ROLLBACK PLAN                                     │
└─────────────────────────────────────────────────────────────────────────────┘

If Critical Bug Found:
──────────────────────────────────────────────────────────────────────────────

Step 1: Revert MIME type changes (5 lines in admin.js)
    │
    ├─── Change allowedMimes back to:
    │    ['application/vnd.openxmlformats...', 'application/msword']
    │
    └─── Remove 'text/plain' and 'text/markdown'

Step 2: Remove textParser require from admin.js
    │
    └─── Delete: const textParser = require('../parsers/textParser');

Step 3: Revert upload handler to original
    │
    └─── Replace switch/case with direct wordParser.parseDocument()

Step 4: Redeploy previous version
    │
    └─── git revert <commit-hash>

Step 5: Monitor logs
    │
    └─── Verify Word uploads still work

──────────────────────────────────────────────────────────────────────────────
Rollback Time: < 5 minutes
Database Rollback: NOT NEEDED (no schema changes)
User Impact: Zero (text uploads temporarily disabled, Word uploads unaffected)


┌─────────────────────────────────────────────────────────────────────────────┐
│                          TESTING STRATEGY                                   │
└─────────────────────────────────────────────────────────────────────────────┘

Unit Tests (textParser.test.js):
──────────────────────────────────────────────────────────────────────────────
    ✓ parseDocument() with .txt file
    ✓ parseDocument() with .md file
    ✓ parseSections() extracts all sections
    ✓ enrichSections() calculates correct depth
    ✓ buildCitation() creates hierarchical citations
    ✓ deduplicateSections() removes duplicates
    ✓ Error handling (empty file, invalid encoding)
    ✓ Edge cases (no patterns, malformed headers)

Integration Tests (document-upload.test.js):
──────────────────────────────────────────────────────────────────────────────
    ✓ Upload .txt file via API → 200 OK
    ✓ Upload .md file via API → 200 OK
    ✓ Upload .pdf file via API → 400 error
    ✓ Sections saved to database correctly
    ✓ Metadata includes correct source ('text' or 'markdown')
    ✓ Database schema matches expectations

Manual Tests (browser):
──────────────────────────────────────────────────────────────────────────────
    ✓ Upload simple text document
    ✓ Upload complex multi-level document
    ✓ Upload Markdown document
    ✓ Verify sections display in viewer
    ✓ Verify depth/hierarchy is correct
    ✓ Check database for correct data

Performance Tests:
──────────────────────────────────────────────────────────────────────────────
    ✓ Parse time < 200ms for typical document
    ✓ Memory usage < 5MB
    ✓ Benchmark vs Word parser (should be 5-10x faster)
    ✓ No regressions to Word parsing speed


┌─────────────────────────────────────────────────────────────────────────────┐
│                        FUTURE ENHANCEMENTS                                  │
└─────────────────────────────────────────────────────────────────────────────┘

Phase 2 (Post-MVP):
──────────────────────────────────────────────────────────────────────────────

1. PDF Support
   ├─── Install: npm install pdf-parse
   ├─── Extract text from PDF
   ├─── Pass to textParser
   └─── Handle multi-column layouts

2. Google Docs Integration
   ├─── OAuth authentication
   ├─── Export as plain text
   ├─── Parse with textParser
   └─── Enable live sync

3. Auto-Hierarchy Detection
   ├─── Analyze document structure
   ├─── Guess hierarchy patterns
   ├─── Suggest organizationConfig
   └─── Allow user approval/editing

4. Enhanced Markdown Support
   ├─── Parse Markdown tables
   ├─── Extract inline formatting
   ├─── Support code blocks
   └─── Preserve links

5. Batch Upload
   ├─── Upload multiple files at once
   ├─── Combine into single document
   └─── Or create multiple documents

6. Template Library
   ├─── Provide sample .txt templates
   ├─── Provide sample .md templates
   ├─── User can download and customize
   └─── Organization-specific templates


═══════════════════════════════════════════════════════════════════════════════
End of Visual Diagram
═══════════════════════════════════════════════════════════════════════════════
