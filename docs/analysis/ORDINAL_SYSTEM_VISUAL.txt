# Ordinal System Visual Explanation

## Two Separate Ordering Systems

┌─────────────────────────────────────────────────────────────────────┐
│                    DOCUMENT_SECTIONS TABLE                          │
├─────────────────────────────────────────────────────────────────────┤
│                                                                     │
│  Each section has TWO ordering fields:                              │
│                                                                     │
│  1. ORDINAL        = Position among siblings (1, 2, 3...)          │
│  2. DOCUMENT_ORDER = Sequential position in document (1, 2, 3...)  │
│                                                                     │
└─────────────────────────────────────────────────────────────────────┘


## Example: Simple Bylaws Document

┌──────────────────────────────────────────────────────────────────────────┐
│ Visual Structure          │ ordinal │ document_order │ depth │ parent  │
├───────────────────────────┼─────────┼────────────────┼───────┼─────────┤
│ Article I                 │    1    │       1        │   0   │  NULL   │
│   Section 1               │    1    │       2        │   1   │ Art I   │
│   Section 2               │    2    │       3        │   1   │ Art I   │
│   Section 3               │    3    │       4        │   1   │ Art I   │
│ Article II                │    2    │       5        │   0   │  NULL   │
│   Section 1               │    1    │       6        │   1   │ Art II  │
│     Subsection A          │    1    │       7        │   2   │ Sec 1   │
│     Subsection B          │    2    │       8        │   2   │ Sec 1   │
│   Section 2               │    2    │       9        │   1   │ Art II  │
│ Article III               │    3    │      10        │   0   │  NULL   │
└──────────────────────────────────────────────────────────────────────────┘

KEY OBSERVATIONS:
  • ORDINAL resets for each parent:
    - Article I, II, III have ordinals 1, 2, 3 (same parent: NULL)
    - Article I's sections have ordinals 1, 2, 3 (same parent: Article I)
    - Article II's sections have ordinals 1, 2 (same parent: Article II)

  • DOCUMENT_ORDER is globally sequential:
    - Never resets, always increments: 1, 2, 3, 4, 5...
    - Matches the order sections appear in original document


## What Happens During INDENT Operation

BEFORE INDENT:
┌─────────────────────────────────────────┐
│ Article I (ord=1, doc_ord=1)            │
│   Section 1 (ord=1, doc_ord=2)          │
│   Section 2 (ord=2, doc_ord=3) ← INDENT │
│   Section 3 (ord=3, doc_ord=4)          │
└─────────────────────────────────────────┘

AFTER INDENT (Section 2 becomes child of Section 1):
┌─────────────────────────────────────────┐
│ Article I (ord=1, doc_ord=1)            │
│   Section 1 (ord=1, doc_ord=2)          │
│     Section 2 (ord=1, doc_ord=3) ✓      │
│   Section 3 (ord=2, doc_ord=4) ✓        │
└─────────────────────────────────────────┘

CHANGES:
  1. Section 2:
     • parent_section_id: Article I → Section 1
     • ordinal: 2 → 1 (first child of Section 1)
     • depth: 1 → 2
     • document_order: 3 (UNCHANGED)

  2. Section 3:
     • ordinal: 3 → 2 (gap closed)
     • Everything else unchanged

CRITICAL: Ordinal must be ≥ 1 (enforced by CHECK constraint)


## What Happens During DEDENT Operation

BEFORE DEDENT:
┌─────────────────────────────────────────┐
│ Article I (ord=1, doc_ord=1)            │
│   Section 1 (ord=1, doc_ord=2)          │
│     Subsection A (ord=1, doc_ord=3)     │
│     Subsection B (ord=2, doc_ord=4) ← DEDENT
│   Section 2 (ord=2, doc_ord=5)          │
└─────────────────────────────────────────┘

AFTER DEDENT (Subsection B becomes sibling of Section 1):
┌─────────────────────────────────────────┐
│ Article I (ord=1, doc_ord=1)            │
│   Section 1 (ord=1, doc_ord=2)          │
│     Subsection A (ord=1, doc_ord=3)     │
│   Subsection B (ord=2, doc_ord=4) ✓     │
│   Section 2 (ord=3, doc_ord=5) ✓        │
└─────────────────────────────────────────┘

CHANGES:
  1. Subsection B:
     • parent_section_id: Section 1 → Article I
     • ordinal: 2 → 2 (inserted after Section 1)
     • depth: 2 → 1
     • document_order: 4 (UNCHANGED)

  2. Section 2:
     • ordinal: 2 → 3 (space created)
     • Everything else unchanged


## What Happens During MOVE UP Operation

BEFORE MOVE UP:
┌─────────────────────────────────────────┐
│ Article I (ord=1, doc_ord=1)            │
│   Section 1 (ord=1, doc_ord=2)          │
│   Section 2 (ord=2, doc_ord=3) ← MOVE UP│
│   Section 3 (ord=3, doc_ord=4)          │
└─────────────────────────────────────────┘

AFTER MOVE UP (Section 2 swaps with Section 1):
┌─────────────────────────────────────────┐
│ Article I (ord=1, doc_ord=1)            │
│   Section 2 (ord=1, doc_ord=3) ✓        │
│   Section 1 (ord=2, doc_ord=2) ✓        │
│   Section 3 (ord=3, doc_ord=4)          │
└─────────────────────────────────────────┘

CHANGES (SWAP):
  • Section 1: ordinal 1 → 2
  • Section 2: ordinal 2 → 1
  • document_order UNCHANGED (still reflects parse order)
  • Section 3 unaffected


## Why Operations Are Failing

┌──────────────────────────────────────────────────────────────────┐
│ THE PROBLEM                                                      │
├──────────────────────────────────────────────────────────────────┤
│                                                                  │
│ Database Constraint:                                             │
│   CHECK (ordinal > 0)  ← Must be positive integer               │
│                                                                  │
│ Missing Functions:                                               │
│   ❌ increment_sibling_ordinals() - Not in database             │
│   ❌ decrement_sibling_ordinals() - Not in database             │
│   ❌ swap_sibling_ordinals()      - Not in database             │
│                                                                  │
│ Code Attempts:                                                   │
│   ❌ supabaseService.sql`ordinal + 1`  ← Invalid API            │
│                                                                  │
│ Result:                                                          │
│   → "function does not exist" errors                             │
│   → "violates check constraint" errors                           │
│   → Operations fail, hierarchy breaks                            │
│                                                                  │
└──────────────────────────────────────────────────────────────────┘


## How RPC Functions Fix This

┌──────────────────────────────────────────────────────────────────┐
│ RPC FUNCTION: decrement_sibling_ordinals()                       │
├──────────────────────────────────────────────────────────────────┤
│                                                                  │
│ Purpose: Close gaps after removing a section                     │
│                                                                  │
│ Example:                                                         │
│   BEFORE: ordinals = [1, 2, ⛔, 4, 5]  (3 was removed)          │
│   CALL: decrement_sibling_ordinals(parent_id, 2, 1)             │
│   AFTER:  ordinals = [1, 2, 3, 4]  ✓                            │
│                                                                  │
│ SQL:                                                             │
│   UPDATE document_sections                                       │
│   SET ordinal = ordinal - 1                                      │
│   WHERE parent_section_id = p_parent_id                          │
│     AND ordinal > p_start_ordinal;                               │
│                                                                  │
└──────────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────────┐
│ RPC FUNCTION: increment_sibling_ordinals()                       │
├──────────────────────────────────────────────────────────────────┤
│                                                                  │
│ Purpose: Make space for inserting a section                      │
│                                                                  │
│ Example:                                                         │
│   BEFORE: ordinals = [1, 2, 3, 4]                               │
│   CALL: increment_sibling_ordinals(parent_id, 3, 1)             │
│   AFTER:  ordinals = [1, 2, ⬜, 4, 5]  (space at 3)             │
│                                                                  │
│ SQL:                                                             │
│   UPDATE document_sections                                       │
│   SET ordinal = ordinal + 1                                      │
│   WHERE parent_section_id = p_parent_id                          │
│     AND ordinal >= p_start_ordinal;                              │
│                                                                  │
└──────────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────────┐
│ RPC FUNCTION: swap_sibling_ordinals()                            │
├──────────────────────────────────────────────────────────────────┤
│                                                                  │
│ Purpose: Swap two sections' ordinals (for move up/down)          │
│                                                                  │
│ Example:                                                         │
│   BEFORE: Section A (ord=2), Section B (ord=3)                  │
│   CALL: swap_sibling_ordinals(A.id, B.id)                       │
│   AFTER:  Section A (ord=3), Section B (ord=2)  ✓               │
│                                                                  │
│ SQL:                                                             │
│   v_ord_1 := SELECT ordinal FROM ... WHERE id = id_1;           │
│   v_ord_2 := SELECT ordinal FROM ... WHERE id = id_2;           │
│   UPDATE ... SET ordinal = v_ord_2 WHERE id = id_1;             │
│   UPDATE ... SET ordinal = v_ord_1 WHERE id = id_2;             │
│                                                                  │
└──────────────────────────────────────────────────────────────────┘


## Common Failure Scenarios

┌──────────────────────────────────────────────────────────────────┐
│ SCENARIO 1: Indent without previous sibling                     │
├──────────────────────────────────────────────────────────────────┤
│ Structure:                                                       │
│   Article I                                                      │
│     Section 1 ← Try to indent                                    │
│                                                                  │
│ Error: "Cannot indent: no earlier sibling"                      │
│ Reason: No previous sibling to become parent                     │
│ Status: ✅ CORRECT BEHAVIOR (by design)                         │
└──────────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────────┐
│ SCENARIO 2: Indent with RPC missing                             │
├──────────────────────────────────────────────────────────────────┤
│ Structure:                                                       │
│   Article I                                                      │
│     Section 1                                                    │
│     Section 2 ← Try to indent                                    │
│                                                                  │
│ Error: "function decrement_sibling_ordinals does not exist"     │
│ Reason: Migration 008 not deployed                               │
│ Status: 🔴 BUG - Need to deploy RPC functions                   │
└──────────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────────┐
│ SCENARIO 3: Ordinal calculation error                           │
├──────────────────────────────────────────────────────────────────┤
│ Code:                                                            │
│   const newOrdinal = (childCount || 0) + 1;                     │
│                                                                  │
│ If childCount = NULL:                                            │
│   newOrdinal = (NULL || 0) + 1 = 0 + 1 = 1  ✅                  │
│                                                                  │
│ If childCount = 3:                                               │
│   newOrdinal = 3 + 1 = 4  ✅                                     │
│                                                                  │
│ Status: ✅ CODE CORRECT (coalesce works)                        │
└──────────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────────┐
│ SCENARIO 4: Invalid Supabase API                                │
├──────────────────────────────────────────────────────────────────┤
│ Code (BROKEN):                                                   │
│   .update({ ordinal: supabaseService.sql`ordinal + 1` })        │
│                                                                  │
│ Error: "supabaseService.sql is not a function"                  │
│ Reason: Supabase JS client doesn't have .sql() method           │
│ Fix: Use RPC function instead                                   │
│ Status: 🔴 BUG - Replace with proper RPC call                   │
└──────────────────────────────────────────────────────────────────┘


## Summary

ORDINAL SYSTEM:
  ✓ Uses 1-based indexing (ordinal starts at 1)
  ✓ Ordinals are per-parent (siblings compete for ordinals)
  ✓ Must be sequential (no gaps: 1, 2, 3, 4...)
  ✓ Separate from document_order (parse sequence)

CURRENT BUGS:
  ✗ RPC functions not deployed
  ✗ Invalid Supabase API usage
  ✗ Move up/down not implemented

FIX PRIORITY:
  1. Deploy RPC functions (migration 008)
  2. Remove invalid .sql() calls
  3. Add move up/down endpoints
  4. Test all operations
