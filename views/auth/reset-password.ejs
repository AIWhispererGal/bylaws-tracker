<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Reset Password - Bylaws Amendment Tracker</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
  <style>
    :root {
      --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      --border-radius: 12px;
    }

    body {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    }

    .auth-container {
      background: white;
      border-radius: 20px;
      box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
      padding: 3rem;
      max-width: 480px;
      width: 100%;
      margin: 2rem;
    }

    .auth-header {
      text-align: center;
      margin-bottom: 2rem;
    }

    .auth-icon {
      font-size: 3.5rem;
      background: var(--primary-gradient);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      margin-bottom: 1rem;
    }

    .auth-header h1 {
      color: #2d3748;
      font-size: 1.75rem;
      font-weight: 700;
      margin-bottom: 0.5rem;
    }

    .auth-header p {
      color: #6c757d;
      font-size: 1rem;
    }

    .form-label {
      font-weight: 600;
      color: #2d3748;
      margin-bottom: 0.5rem;
    }

    .form-control {
      border: 2px solid #e5e7eb;
      border-radius: 10px;
      padding: 0.75rem 1rem;
      font-size: 1rem;
      transition: all 0.3s ease;
    }

    .form-control:focus {
      border-color: #667eea;
      box-shadow: 0 0 0 0.25rem rgba(102, 126, 234, 0.25);
    }

    .input-group {
      position: relative;
    }

    .input-group-text {
      background: transparent;
      border: 2px solid #e5e7eb;
      border-right: none;
      border-radius: 10px 0 0 10px;
      color: #6c757d;
    }

    .input-group .form-control {
      border-left: none;
      border-radius: 0 10px 10px 0;
    }

    .input-group:focus-within .input-group-text {
      border-color: #667eea;
    }

    .btn-submit {
      background: var(--primary-gradient);
      border: none;
      color: white;
      font-weight: 600;
      padding: 0.875rem;
      border-radius: 10px;
      width: 100%;
      font-size: 1rem;
      transition: all 0.3s ease;
      margin-top: 1rem;
    }

    .btn-submit:hover:not(:disabled) {
      transform: translateY(-2px);
      box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
    }

    .btn-submit:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }

    .auth-links {
      text-align: center;
      margin-top: 1.5rem;
    }

    .auth-links a {
      color: #667eea;
      text-decoration: none;
      font-weight: 600;
      transition: color 0.3s ease;
    }

    .auth-links a:hover {
      color: #764ba2;
      text-decoration: underline;
    }

    .alert {
      border-radius: 10px;
      margin-bottom: 1.5rem;
      border: none;
    }

    .alert-danger {
      background-color: #fee2e2;
      color: #991b1b;
    }

    .alert-success {
      background-color: #d1fae5;
      color: #065f46;
    }

    .password-strength {
      margin-top: 0.5rem;
      font-size: 0.875rem;
    }

    .strength-bar {
      height: 4px;
      border-radius: 2px;
      background: #e5e7eb;
      overflow: hidden;
      margin-top: 0.5rem;
    }

    .strength-fill {
      height: 100%;
      transition: all 0.3s ease;
      width: 0;
    }

    .strength-weak { background: #ef4444; width: 33%; }
    .strength-medium { background: #f59e0b; width: 66%; }
    .strength-strong { background: #10b981; width: 100%; }

    .spinner-border-sm {
      width: 1rem;
      height: 1rem;
      border-width: 0.15em;
    }

    @media (max-width: 576px) {
      .auth-container {
        padding: 2rem 1.5rem;
        margin: 1rem;
      }

      .auth-header h1 {
        font-size: 1.5rem;
      }
    }

    *:focus-visible {
      outline: 2px solid #667eea;
      outline-offset: 2px;
    }
  </style>
</head>
<body>
  <div class="auth-container">
    <div class="auth-header">
      <div class="auth-icon">
        <i class="bi bi-shield-lock"></i>
      </div>
      <h1>Reset Password</h1>
      <p>Enter your new password below</p>
    </div>

    <div id="alertContainer"></div>

    <form id="resetPasswordForm" novalidate>
      <div class="mb-3">
        <label for="password" class="form-label">
          New Password
        </label>
        <div class="input-group">
          <span class="input-group-text">
            <i class="bi bi-lock"></i>
          </span>
          <input
            type="password"
            class="form-control"
            id="password"
            name="password"
            placeholder="Enter new password"
            required
            autocomplete="new-password"
            aria-required="true"
          >
        </div>
        <div class="password-strength">
          <div class="strength-bar">
            <div id="strengthFill" class="strength-fill"></div>
          </div>
          <small id="strengthText" class="text-muted"></small>
        </div>
      </div>

      <div class="mb-3">
        <label for="confirmPassword" class="form-label">
          Confirm Password
        </label>
        <div class="input-group">
          <span class="input-group-text">
            <i class="bi bi-lock-fill"></i>
          </span>
          <input
            type="password"
            class="form-control"
            id="confirmPassword"
            name="confirmPassword"
            placeholder="Confirm new password"
            required
            autocomplete="new-password"
            aria-required="true"
          >
        </div>
        <div class="invalid-feedback" id="confirmHelp"></div>
      </div>

      <button
        type="submit"
        class="btn btn-submit"
        id="submitButton"
      >
        <span id="buttonText">Reset Password</span>
        <span id="buttonSpinner" class="d-none">
          <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
          Resetting...
        </span>
      </button>
    </form>

    <div class="auth-links mt-4">
      <a href="/auth/login">
        <i class="bi bi-arrow-left me-1"></i>
        Back to Sign In
      </a>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    const form = document.getElementById('resetPasswordForm');
    const submitButton = document.getElementById('submitButton');
    const buttonText = document.getElementById('buttonText');
    const buttonSpinner = document.getElementById('buttonSpinner');
    const alertContainer = document.getElementById('alertContainer');
    const passwordInput = document.getElementById('password');
    const confirmPasswordInput = document.getElementById('confirmPassword');
    const strengthFill = document.getElementById('strengthFill');
    const strengthText = document.getElementById('strengthText');

    function showAlert(message, type = 'danger') {
      alertContainer.innerHTML = `
        <div class="alert alert-${type}" role="alert">
          <i class="bi bi-${type === 'success' ? 'check-circle' : 'exclamation-triangle'} me-2"></i>
          ${message}
        </div>
      `;
    }

    // Password strength checker
    function checkPasswordStrength(password) {
      let strength = 0;
      if (password.length >= 8) strength++;
      if (password.length >= 12) strength++;
      if (/[a-z]/.test(password) && /[A-Z]/.test(password)) strength++;
      if (/\d/.test(password)) strength++;
      if (/[^a-zA-Z0-9]/.test(password)) strength++;

      strengthFill.className = 'strength-fill';

      if (strength <= 2) {
        strengthFill.classList.add('strength-weak');
        strengthText.textContent = 'Weak password';
        strengthText.className = 'text-danger';
      } else if (strength <= 4) {
        strengthFill.classList.add('strength-medium');
        strengthText.textContent = 'Medium password';
        strengthText.className = 'text-warning';
      } else {
        strengthFill.classList.add('strength-strong');
        strengthText.textContent = 'Strong password';
        strengthText.className = 'text-success';
      }
    }

    passwordInput.addEventListener('input', (e) => {
      checkPasswordStrength(e.target.value);
    });

    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      const password = passwordInput.value;
      const confirmPassword = confirmPasswordInput.value;

      // Validation
      if (!password || !confirmPassword) {
        showAlert('Please fill in all fields');
        return;
      }

      if (password.length < 8) {
        showAlert('Password must be at least 8 characters long');
        return;
      }

      if (password !== confirmPassword) {
        showAlert('Passwords do not match');
        return;
      }

      // Extract recovery token from URL fragment
      const hashParams = new URLSearchParams(window.location.hash.substring(1));
      const accessToken = hashParams.get('access_token');
      const refreshToken = hashParams.get('refresh_token');

      if (!accessToken) {
        showAlert('Invalid or expired reset link. Please request a new one.');
        return;
      }

      // Show loading state
      submitButton.disabled = true;
      buttonText.classList.add('d-none');
      buttonSpinner.classList.remove('d-none');
      alertContainer.innerHTML = '';

      try {
        const response = await fetch('/auth/reset-password', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            password,
            confirmPassword,
            access_token: accessToken,
            refresh_token: refreshToken
          })
        });

        const data = await response.json();

        if (data.success) {
          showAlert(data.message, 'success');

          // Redirect to login after 2 seconds
          setTimeout(() => {
            window.location.href = data.redirectTo || '/auth/login';
          }, 2000);
        } else {
          showAlert(data.error || 'Failed to reset password');
          submitButton.disabled = false;
          buttonText.classList.remove('d-none');
          buttonSpinner.classList.add('d-none');
        }
      } catch (error) {
        console.error('Request error:', error);
        showAlert('An error occurred. Please try again or request a new reset link.');
        submitButton.disabled = false;
        buttonText.classList.remove('d-none');
        buttonSpinner.classList.add('d-none');
      }
    });

    // Check if we have a valid recovery token in the URL
    window.addEventListener('load', () => {
      const hashParams = new URLSearchParams(window.location.hash.substring(1));
      const error = hashParams.get('error');
      const errorDescription = hashParams.get('error_description');
      const accessToken = hashParams.get('access_token');
      const type = hashParams.get('type');

      if (error) {
        showAlert(errorDescription || 'Invalid or expired reset link. Please request a new one.');
        submitButton.disabled = true;
      } else if (!accessToken || type !== 'recovery') {
        showAlert('No reset token found. Please click the link in your email to reset your password.', 'danger');
        submitButton.disabled = true;
      } else {
        // Token present and valid - show success message
        showAlert('Reset link verified! You can now set your new password.', 'success');
      }
    });
  </script>
</body>
</html>
